package ch.bbw.zork;import java.util.HashMap;import java.util.concurrent.TimeUnit;/** * Class Game - the main class of the "Zork" game. * * Author: Michael Kolling, 1.1, March 2000 refactoring: Rinaldo Lanza, * September 2020 enhanced: Jeremy Colameo, 05.12.2020 */public class Game {	private Parser parser;	private Room currentRoom;	private Room eingang, waffenkammer, skorpionenraum, mediraum, falle, raum4, tresorraum, absturzfalle, keyraum,			tresorraum2, mumieraum;	private Item fackel, schwert, axt, peitsche, skorpion, medizin, schild, gold, schlüssel, mummie, mappe;	private HashMap<String, Item> myItems;	public Game() {		myItems = new HashMap<>();		parser = new Parser(System.in);		// eingangsraum definiert und Items hinzugefügt		eingang = new Room("Eingang", "Im Eingang der Pyramide.");		fackel = new Item("Fackel", "Die Fackel", 175.50);		eingang.addItem(fackel);		// waffenkammer definiert und Items hinzugefügt		waffenkammer = new Room("Waffenraum", "In der Waffenkammer. Hier kannst du dir eine Waffe aussuchen: ");		schwert = new Item("Schwert", "Der Schwert", 1200.50);		waffenkammer.addItem(schwert);		axt = new Item("axt", "axt", 2000.50);		waffenkammer.addItem(axt);		peitsche = new Item("peitsche", "peitsche", 220.50);		waffenkammer.addItem(peitsche);		// skorpionenraum definiert und Items hinzugefügt		skorpionenraum = new Room("Skorpionenraum",				"Im Skorpionenraum. Du hast 10 sekunden zeit um auszuwählen welchen Raum"						+ " du betreten möchtest,\nbevor du von den Skorpionen gestochen wirst.");		skorpion = new Item("Skorpion", "Skorpion", 20.50);		skorpionenraum.addItem(skorpion);		// medizinraum definiert und Items hinzugefügt		mediraum = new Room("Mediraum", "Medizinraum, du kannst dir eine Medizin aussuchen.");		medizin = new Item("medizin", "medizin", 0);		mediraum.addItem(medizin);		// In diesem Raum stirbst du		falle = new Room("Falle", "in der Falle. Du bist von den Steinplatten zerquetscht worden.");		// raum4 definiert und Items hinzugefügt		raum4 = new Room("Raum4", "Im Flur. es ist sehr eng hier... ");		schild = new Item("Schild", "ein schild", 200);		raum4.addItem(schild);		// Tresorraum definiert und Items hinzugefügt		tresorraum = new Room("Tresorraum", "Im Tresorraum. Schau mal wie viel Gold hier rumliegt.");		gold = new Item("Gold", "Gold geld", 20);		tresorraum.addItem(gold);		// In diesem Raum stirbst du		absturzfalle = new Room("Absturzfalle", "In der Falle. Du bist abgestürtzt und wurdest zum Ketchup");		// Schlüsselraum definiert und Items hinzugefügt		keyraum = new Room("Keyraum", "Flur...hmm hier liegt ein schlüssel. Nehme es.\n"				+ "Hier sind zwei Tore. Rechts glitzerts. ist es wohl ein anderen Tresorraum? oder eher links? dort ist es aber dunkel. welcher möchtest du öffnen? ");		schlüssel = new Item("Schlüssel", "Schlüssel", 5);		keyraum.addItem(schlüssel);		// In diesem Raum stirbst du		tresorraum2 = new Room("Tresorraum2",				"In der Falle. Du bist in einem Fallmechanismus reingefallen. Ein Pfeil wurde geschossen und du liegst jetzt tot auf dem Boden.");		// Mumienraum definiert und Items hinzugefügt		mumieraum = new Room("Mumienraum",				"neben den Sarkophag. Als du in diesem Raum eingetreten bist, hast du einen alten Ägyptischen fluch ausgelöst. \nDie Mumie ist jetzt hellwach und tötet jetzt alle die Ihm beim schlafen gestört haben. Hier ist die Mumie.");		mummie = new Item("böse mummie", "mummie", 200);		mumieraum.addItem(mummie);		// Räume werden hier definiert.		eingang.setExits(waffenkammer, skorpionenraum, null);		skorpionenraum.setExits(mediraum, falle, eingang);		waffenkammer.setExits(mediraum, null, eingang);		mediraum.setExits(raum4, null, null);		raum4.setExits(tresorraum, absturzfalle, mediraum);		tresorraum.setExits(keyraum, null, raum4);		keyraum.setExits(tresorraum2, mumieraum, null);		mumieraum.setExits(null, keyraum, null);		currentRoom = eingang; // start game outside	}	/**	 * Main play routine. Loops bis das Spiel beendet wird.	 */	public void play() {		printWelcome();		// Enter the main command loop. Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	/*	 * Einleitungstext	 */	private void printWelcome() {		System.out.println();		System.out.println("Zorn des Pharaos");		System.out.println("________________");		System.out.println();		System.out.println("Wilkommen in Ägypten!");		System.out				.println("Als du mit deinem Archäologen " + "Team eine unerfoschte Pyramide entdeckt, entscheidest du "						+ "dich die Pyramide alleine zu erforschen.\nJedoch nachdem du "						+ "die Pyramide eingetreten bist, ist der Eingangstor hinter dir zu "						+ "gegangen.\nFinde die Mumie, dies ist dein einziger Ausgang.");		System.out.println("Tippe 'help' wenn du Hilfe brauchst.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("Ich...verstehe dich nicht...");			System.out.println("benutze folgende Befehle: " + parser.showCommands());			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("go")) {			goRoom(command);		} else if (commandWord.equals("nimm")) {			takeItem(command);		} else if(commandWord.equals("ablegen")) {			releaseItem(command);		} else if(commandWord.equals("mappe")){			mappe(command);		}		else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit was?");			} else {				return true; // signal that we want to quit			}		}		return false;	}	private void printHelp() {		System.out.println("Du bist verloren. Du bist alleine. Du wanderst");		System.out.println("Irgendwo in der Pyramide...");		System.out.println();		System.out.println("Deine Commands sind:");		System.out.println(parser.showCommands());	}	/*	 * Hier wird ein Item in dein Rucksack hinzugefügt. 	 * Da befindet sich auch die ganze Spiellogik.	 * 	 * Programmiert: Jeremy Colameo	 */	private void takeItem(Command command) {		if (!command.hasSecondWord()) {			System.out.println("nimm was?");		} else {			Item item = currentRoom.removeItem(command.getSecondWord());			if (item != null) {				myItems.put(item.getName(), item);				System.out.println(item.getName() + " ist jetzt bei dir");			} else {				System.out.println("Ich kenne diesen Gegenstand " + command.getSecondWord()						+ " nicht, achte auf die gross/klein Schreibung! ");			}		}	}		/*	 * Hier wird einen Item wieder im Current Room abgelegt	 */		private void releaseItem(Command command) {		if(!command.hasSecondWord()) { //habe ich das 2. Wort nicht? dann kommt es diesen text vor:			System.out.println("lege was ab?");		} else {			if(myItems.containsKey(command.getSecondWord())) {				Item item = myItems.remove(command.getSecondWord()); 				currentRoom.addItem(item);				System.out.println("du hast jetzt " + command.getSecondWord() + " abgelegt");			} else {				System.out.println("Ich kenne diesen Gegenstand " + command.getSecondWord()				+ " nicht, achte auf die gross/klein Schreibung! ");			}		}	}		private void mappe(Command command) {		System.out.println("An der Wand sind Hieroglyphen. Dort ist geschrieben, wo du dich befindest.");		System.out.println(currentRoom.shortDescription());	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) { //falls man den zweiten "Command" nicht hat, soll dieser Text vorkommen.			System.out.println("Go where?");		} else {			if (!myItems.containsKey("Fackel")) { //Sonst: falls man keinen Schlüssel hat, sollte diesen Text vorkommen und man kann nicht weiter gehen.				System.out.println("du siehst ja nichts ohne Fackel!");			} else {				if (currentRoom.getName().equals("Keyraum") && !myItems.containsKey("Schlüssel")) { //Das gleiche passiert im Schlüsselraum, wenn man in den Mumienraum betreten möchte					System.out.println("du kannst ohne Schlüssel nicht im nächsten Raum gehen.");					return;				}				String direction = command.getSecondWord();				// Try to leave current room.				Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)					System.out.println("Hier ist kein Ausgang!");				else {					currentRoom = nextRoom;					System.out.println(currentRoom.longDescription());					if (currentRoom.getName().equals("Mumienraum")) { //Falls man im Mumien raum keinen, Schwert, keine Axt oder keinen Schild dabei hat, verlieren wir gegen die Mumie. 						if (!myItems.containsKey("Schwert") && !myItems.containsKey("Axt")								&& !myItems.containsKey("Peitsche")&&!myItems.containsKey("Schild")) {							System.out.println("Du hast keine Waffe, deshalb bist du nun tot!");							System.exit(1);						} else {							System.out.println(//Falls man aber, mindestens einen von den Obengenannten Objekte hatte, gewinnt man das Spiel.									"Herzlichen Glückwunsch, da du deine Waffe bei dir hattest, hast du die Mumie besiegt!");							System.exit(1);						}					} else if (currentRoom.getName().equals("Falle") || currentRoom.getName().equals("Absturzfalle")//Hier wurden Fallen definiert. WEnn man hier lang geht, verliert man.							|| currentRoom.getName().equals("Tresorraum2")) {						System.out.println("Du bist tot.");						System.exit(1);					} else if (currentRoom.getName().equals("Skorpionenraum")) {//Mit einen neuen Timer countdown Klasse haben wir definiert, dass falls man nicht im Ramen einer gewissen Zeit, 																				//(in diesem Fall 10 sec) nicht ins nächsten Raum geht, wird man von einem Skorpion gebissen und getötet.						new CountDown(new CountDown.TimerDone() {							@Override							public void finish() {								if (currentRoom.getName().equals("Skorpionenraum")) {									System.out.println("Du wurdest von einem Skorpion gestochen. Du bist nun Tot.");									System.exit(1);								}							}						}, TimeUnit.SECONDS.toMillis(10));					}				}			}		}	}}